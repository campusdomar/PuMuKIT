<?php

namespace Pumukit\SchemaBundle\Repository;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ODM\MongoDB\DocumentRepository;
use Pumukit\SchemaBundle\Document\Series;
use Pumukit\SchemaBundle\Document\Tag;
use Pumukit\SchemaBundle\Document\MultimediaObject;
use Pumukit\SchemaBundle\Document\Broadcast;
use Pumukit\SchemaBundle\Document\EmbeddedBroadcast;
use Pumukit\SchemaBundle\Document\Group;
use Pumukit\SchemaBundle\Utils\Mongo\TextIndexUtils;

/**
 * MultimediaObjectRepository.
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MultimediaObjectRepository extends DocumentRepository
{
    /**
     * Find all multimedia objects in a series with given status.
     *
     * @param Series $series
     * @param array  $status
     * @param int    $limit
     * @param int    $page
     *
     * @return ArrayCollection
     */
    public function findWithStatus(Series $series, array $status, $limit = 0, $page = 0)
    {
        $qb = $this->createQueryBuilder()->field('series')->references($series)->field('status')->in($status)->sort('rank', 1);

        $qb = $this->addLimitToQueryBuilder($qb, $limit, $page);

        return $qb->getQuery()->execute();
    }

    /**
     * Find multimedia object prototype.
     *
     * @param Series $series
     *
     * @return array|object
     */
    public function findPrototype(Series $series)
    {
        return $this->createQueryBuilder()
            ->field('series')->references($series)
            ->field('status')->equals(MultimediaObject::STATUS_PROTOTYPE)
            ->getQuery()
            ->getSingleResult();
    }

    /**
     * Find multimedia objects in a series
     * without the template (prototype).
     *
     * @param Series $series
     *
     * @return ArrayCollection
     */
    public function findWithoutPrototype(Series $series)
    {
        $aux = $this->createQueryBuilder()
            ->field('series')->references($series)
            ->field('status')->notEqual(MultimediaObject::STATUS_PROTOTYPE)
            ->sort('rank', 1)
            ->getQuery()
            ->execute();

        return $aux;
    }

    /**
     * Count multimedia objects in a series
     * without the template (prototype).
     *
     * @param Series $series
     *
     * @return ArrayCollection
     */
    public function countWithoutPrototype(Series $series)
    {
        $aux = $this->createQueryBuilder()
             ->field('series')->references($series)
             ->field('status')->notEqual(MultimediaObject::STATUS_PROTOTYPE)
             ->sort('rank', 1)
             ->getQuery()
             ->count();

        return $aux;
    }

    /**
     * Find multimedia objects by pic id.
     *
     * @param string $picId
     *
     * @return array|object
     */
    public function findByPicId($picId)
    {
        return $this->createQueryBuilder()
            ->field('pics._id')->equals(new \MongoId($picId))->getQuery()
            ->getSingleResult();
    }

    /**
     * Find multimedia objects by person id.
     *
     * @param string $personId
     *
     * @return ArrayCollection
     */
    public function findByPersonId($personId)
    {
        return $this->createStandardQueryBuilder()
            ->field('people.people._id')->equals(new \MongoId($personId))->getQuery()
            ->execute();
    }

    /**
     * Find multimedia objects by role code.
     *
     * @param string $roleCode
     *
     * @return ArrayCollection
     */
    public function findByRoleCod($roleCode)
    {
        return $this->createStandardQueryBuilder()
            ->field('people.cod')->equals($roleCode)
            ->getQuery()
            ->execute();
    }

    /**
     * Find multimedia objects by role id.
     *
     * @param string $roleId
     *
     * @return ArrayCollection
     */
    public function findByRoleId($roleId)
    {
        return $this->createStandardQueryBuilder()
            ->field('people._id')->equals(new \MongoId($roleId))
            ->getQuery()
            ->execute();
    }

    /**
     * Find multimedia objects by track id.
     *
     * @param string $trackId
     *
     * @return array|null|object
     */
    public function findOneByTrackId($trackId)
    {
        return $this->createStandardQueryBuilder()
            ->field('tracks._id')->equals(new \MongoId($trackId))
            ->getQuery()
            ->getSingleResult();
    }

    /**
     * Create query builder of
     * find multimedia objects by person id
     * with given role.
     *
     * @param       $personId
     * @param       $roleCod
     * @param array $sort
     * @param int   $limit
     * @param int   $page
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder|QueryBuilder
     */
    public function createBuilderByPersonIdWithRoleCod($personId, $roleCod, $sort = array(), $limit = 0, $page = 0)
    {
        $qb = $this->createQueryBuilder();
        $qb->field('people')->elemMatch($qb->expr()->field('people._id')->equals(new \MongoId($personId))->field('cod')->equals($roleCod));

        $qb = $this->addSortToQueryBuilder($qb, $sort);

        $qb = $this->addLimitToQueryBuilder($qb, $limit, $page);

        return $qb;
    }

    /**
     * Find multimedia objects by person id with given role.
     *
     * @param       $personId
     * @param       $roleCod
     * @param array $sort
     * @param int   $limit
     * @param int   $page
     *
     * @return mixed
     *
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function findByPersonIdWithRoleCod($personId, $roleCod, $sort = array(), $limit = 0, $page = 0)
    {
        $qb = $this->createBuilderByPersonIdWithRoleCod($personId, $roleCod, $sort, $limit, $page);

        return $qb->getQuery()->execute();
    }

    /**
     * Find multimedia objects by person id
     * with given role in given series.
     *
     * @param Series $series
     * @param string $personId
     * @param string $roleCod
     *
     * @return ArrayCollection
     */
    public function findBySeriesAndPersonIdWithRoleCod($series, $personId, $roleCod)
    {
        $qb = $this->createStandardQueryBuilder()->field('series')->references($series);
        $qb->field('people')->elemMatch($qb->expr()->field('people._id')->equals(new \MongoId($personId))->field('cod')->equals($roleCod));

        return $qb->getQuery()->execute();
    }

    /**
     * Find people in multimedia objects with given role.
     *
     * @param string $roleCode
     *
     * @return array
     *
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function findPeopleWithRoleCode($roleCode)
    {
        $dm = $this->getDocumentManager();
        $collection = $dm->getDocumentCollection('PumukitSchemaBundle:MultimediaObject');

        $pipeline = array(
            array('$match' => array('people.cod' => "$roleCode")),
            array(
                '$project' => array(
                    '_id' => 0,
                    'people.cod' => 1,
                    'people.people._id' => 1,
                ),
            ),
            array('$unwind' => '$people'),
        );

        $aggregation = $collection->aggregate($pipeline, array('cursor' => array()));

        $people = array();

        foreach ($aggregation as $element) {
            if (null !== $element['people']) {
                if ((null !== $element['people']['cod']) && (null !== $element['people']['people'])) {
                    if (0 === strpos($element['people']['cod'], $roleCode)) {
                        foreach ($element['people']['people'] as $person) {
                            if (!in_array($person['_id']->{'$id'}, $people)) {
                                $people[] = $person['_id']->{'$id'};
                            }
                        }
                    }
                }
            }
        }

        return $people;
    }

    /**
     * Find person in multimedia objects with given role and given email.
     *
     * @param $roleCode
     * @param $email
     *
     * @return array
     *
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function findPersonWithRoleCodeAndEmail($roleCode, $email)
    {
        $dm = $this->getDocumentManager();
        $collection = $dm->getDocumentCollection('PumukitSchemaBundle:MultimediaObject');

        $pipeline = array(
            array(
                '$match' => array(
                    'people.cod' => "$roleCode",
                    'people.people.email' => "$email",
                ),
            ),
            array(
                '$project' => array(
                    '_id' => 0,
                    'people.cod' => 1,
                    'people.people.email' => 1,
                    'people.people._id' => 1,
                ),
            ),
            array('$unwind' => '$people'),
        );

        $aggregation = $collection->aggregate($pipeline, array('cursor' => array()));

        $persons = array();

        foreach ($aggregation as $element) {
            if (null !== $element['people']) {
                if ((null !== $element['people']['cod']) && (null !== $element['people']['people'])) {
                    if ((0 === strpos($element['people']['cod'], $roleCode))) {
                        foreach ($element['people']['people'] as $person) {
                            if ($person['email'] === $email) {
                                if (!in_array($person['_id']->{'$id'}, $persons)) {
                                    $persons[] = $person['_id']->{'$id'};
                                }
                            }
                        }
                    }
                }
            }
        }

        return $persons;
    }

    /**
     * Find series by person id.
     *
     * @param string $personId
     *
     * @return ArrayCollection
     */
    public function findSeriesFieldByPersonId($personId)
    {
        return $this->createQueryBuilder()
            ->field('people.people._id')->equals(new \MongoId($personId))
            ->distinct('series')
            ->getQuery()
            ->execute();
    }

    /**
     * Search series using text index.
     *
     * @param     $text
     * @param int $limit
     * @param int $page
     *
     * @return ArrayCollection
     */
    public function searchSeriesField($text, $limit = 0, $page = 0)
    {
        $qb = $this->createQueryBuilder()
            ->field('$text')->equals(array('$search' => $text))
            ->distinct('series');

        $qb = $this->addLimitToQueryBuilder($qb, $limit, $page);

        return $qb->getQuery()->execute();
    }

    /**
     * Search series using text index or the _id.
     *
     * @param        $text
     * @param int    $limit
     * @param int    $page
     * @param string $locale
     *
     * @return ArrayCollection
     */
    public function getIdsWithSeriesTextOrId($text, $limit = 0, $page = 0, $locale = 'en')
    {
        $qb = $this->createStandardQueryBuilder();

        $text = trim($text);
        if ((false !== strpos($text, '*')) && (false === strpos($text, ' '))) {
            $text = str_replace('*', '.*', $text);
            $mRegex = new \MongoRegex("/$text/i");
            $qb->addOr($qb->expr()->field('title'.$locale)->equals($mRegex));
            $qb->addOr($qb->expr()->field('people.people.name')->equals($mRegex));
        } else {
            $qb->addOr($qb->expr()->field('$text')->equals(array(
                 '$search' => TextIndexUtils::cleanTextIndex($text),
                 '$language' => TextIndexUtils::getCloseLanguage($locale),
              )));
            $qb->addOr($qb->expr()->field('_id')->equals($text));
        }

        $qb->distinct('series');

        $qb = $this->addLimitToQueryBuilder($qb, $limit, $page);

        return $qb->getQuery()->execute();
    }

    /**
     * Find series by person id and role code.
     *
     * @param string $personId
     * @param string $roleCod
     *
     * @return ArrayCollection
     */
    public function findSeriesFieldByPersonIdAndRoleCod($personId, $roleCod)
    {
        $qb = $this->createQueryBuilder();
        $qb->field('people')
            ->elemMatch(
                $qb->expr()
                    ->field('people._id')->equals(new \MongoId($personId))
                    ->field('cod')->equals($roleCod)
            );

        return $qb->distinct('series')->getQuery()->execute();
    }

    /**
     * Find by person id and role code or groups query builder.
     *
     * @param $personId
     * @param $roleCod
     * @param $groups
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function findByPersonIdAndRoleCodOrGroupsQueryBuilder($personId, $roleCod, $groups)
    {
        $groupsIds = $this->getGroupsIdsArray($groups);

        $qb = $this->createQueryBuilder();
        $qb->addOr($qb->expr()->field('groups')->in($groupsIds));
        $qb->addOr($qb->expr()->field('people')->elemMatch($qb->expr()->field('people._id')->equals(new \MongoId($personId))->field('cod')->equals($roleCod)));

        return $qb;
    }

    /**
     * Find by person id
     * and role code or groups
     * query.
     *
     * @param string          $personId
     * @param string          $roleCod
     * @param ArrayCollection $groups
     *
     * @return \Doctrine\ODM\MongoDB\Query\Query
     */
    public function findByPersonIdAndRoleCodOrGroupsQuery($personId, $roleCod, $groups)
    {
        $qb = $this->findByPersonIdAndRoleCodOrGroupsQueryBuilder($personId, $roleCod, $groups);

        return $qb->getQuery();
    }

    /**
     * Find by person id and role code or groups.
     *
     * @param $personId
     * @param $roleCod
     * @param $groups
     *
     * @return mixed
     *
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function findByPersonIdAndRoleCodOrGroups($personId, $roleCod, $groups)
    {
        $query = $this->findByPersonIdAndRoleCodOrGroupsQuery($personId, $roleCod, $groups);

        return $query->execute();
    }

    /**
     * Find series by person id and role code or groups.
     *
     * @param string          $personId
     * @param string          $roleCod
     * @param ArrayCollection $groups
     *
     * @return ArrayCollection
     */
    public function findSeriesFieldByPersonIdAndRoleCodOrGroups($personId, $roleCod, $groups)
    {
        $qb = $this->findByPersonIdAndRoleCodOrGroupsQueryBuilder($personId, $roleCod, $groups);

        return $qb->distinct('series')->getQuery()->execute();
    }

    /**
     * Find multimedia objects by tag id.
     *
     * @param Tag|EmbeddedTag $tag
     * @param array           $sort
     * @param int             $limit
     * @param int             $page
     *
     * @return ArrayCollection
     */
    public function findWithTag(Tag $tag, $sort = array(), $limit = 0, $page = 0)
    {
        $qb = $this->createBuilderWithTag($tag, $sort);

        $qb = $this->addLimitToQueryBuilder($qb, $limit, $page);

        return $qb->getQuery()->execute();
    }

    /**
     * Find multimedia objects by tag id without tag children.
     *
     * @param Tag|EmbeddedTag $tag
     * @param array           $sort
     * @param int             $limit
     * @param int             $page
     *
     * @return ArrayCollection
     */
    public function findWithGeneralTag(Tag $tag, $sort = array(), $limit = 0, $page = 0)
    {
        $qb = $this->createBuilderWithGeneralTag($tag, $sort);

        $qb = $this->addLimitToQueryBuilder($qb, $limit, $page);

        return $qb->getQuery()->execute();
    }

    /**
     * Create QueryBuilder to find multimedia objects by tag id.
     *
     * @param Tag|EmbeddedTag $tag
     * @param array           $sort
     *
     * @return QueryBuilder
     */
    public function createBuilderWithTag(Tag $tag, $sort = array())
    {
        $qb = $this->createStandardQueryBuilder()->field('tags._id')->equals(new \MongoId($tag->getId()));

        $qb = $this->addSortToQueryBuilder($qb, $sort);

        return $qb;
    }

    /**
     * Create QueryBuilder to find multimedia objects by series.
     *
     * @param Series $series
     * @param array  $sort
     *
     * @return QueryBuilder
     */
    public function createBuilderWithSeries(Series $series, $sort = array())
    {
        $qb = $this->createStandardQueryBuilder()->field('series')->references($series);

        $qb = $this->addSortToQueryBuilder($qb, $sort);

        return $qb;
    }

    /**
     * Create QueryBuilder to find multimedia objects by series and status.
     *
     * @param Series $series
     * @param array  $sort
     *
     * @return QueryBuilder
     */
    public function createBuilderWithSeriesAndStatus(Series $series, $status = array(), $sort = array())
    {
        $qb = $this->createQueryBuilder()->field('series')->references($series)->field('status')->in($status);

        $qb = $this->addSortToQueryBuilder($qb, $sort);

        return $qb;
    }

    /**
     * Create QueryBuilder to find multimedia objects with Tag and without any Tag children.
     *
     * @param Tag|EmbeddeTag $tag
     * @param array          $sort
     *
     * @return QueryBuilder
     */
    public function createBuilderWithGeneralTag(Tag $tag, $sort = array())
    {
        $qb = $this->createStandardQueryBuilder()->field('tags._id')->in(array(new \MongoId($tag->getId())))->field('tags.path')->notIn(array(new \MongoRegex('/'.preg_quote($tag->getPath()).'.*\|/')));

        $qb = $this->addSortToQueryBuilder($qb, $sort);

        return $qb;
    }

    /**
     * Find one multimedia object by tag id.
     *
     * @param Tag|EmbeddedTag $tag
     *
     * @return MultimediaObject
     */
    public function findOneWithTag(Tag $tag)
    {
        return $this->createStandardQueryBuilder()->field('tags._id')->equals(new \MongoId($tag->getId()))->getQuery()->getSingleResult();
    }

    /**
     * Find multimedia objects with any tag.
     *
     * @param array $tags
     * @param array $sort
     * @param int   $limit
     * @param int   $page
     *
     * @return ArrayCollection
     */
    public function findWithAnyTag($tags, $sort = array(), $limit = 0, $page = 0)
    {
        $mongoIds = $this->getMongoIds($tags);
        $qb = $this->createStandardQueryBuilder()->field('tags._id')->in($mongoIds);

        $qb = $this->addSortAndLimitToQueryBuilder($qb, $sort, $limit, $page);

        return $qb->getQuery()->execute();
    }

    /**
     * Find multimedia objects with all tags.
     *
     * @param array $tags
     * @param array $sort
     * @param int   $limit
     * @param int   $page
     *
     * @return ArrayCollection
     */
    public function findWithAllTags($tags, $sort = array(), $limit = 0, $page = 0)
    {
        $mongoIds = $this->getMongoIds($tags);
        $qb = $this->createStandardQueryBuilder()->field('tags._id')->all($mongoIds);

        $qb = $this->addSortAndLimitToQueryBuilder($qb, $sort, $limit, $page);

        return $qb->getQuery()->execute();
    }

    /**
     * Find one multimedia object with all tags.
     *
     * @param array $tags
     *
     * @return MultimediaObject
     */
    public function findOneWithAllTags($tags)
    {
        $mongoIds = $this->getMongoIds($tags);
        $qb = $this->createStandardQueryBuilder()->field('tags._id')->all($mongoIds);

        return $qb->getQuery()->getSingleResult();
    }

    /**
     * Find multimedia objects without tag id.
     *
     * @param Tag|EmbeddedTag $tag
     * @param array           $sort
     * @param int             $limit
     * @param int             $page
     *
     * @return ArrayCollection
     */
    public function findWithoutTag(Tag $tag, $sort = array(), $limit = 0, $page = 0)
    {
        $qb = $this->createStandardQueryBuilder()->field('tags._id')->notEqual(new \MongoId($tag->getId()));

        $qb = $this->addSortAndLimitToQueryBuilder($qb, $sort, $limit, $page);

        return $qb->getQuery()->execute();
    }

    /**
     * Find one multimedia object without tag id.
     *
     * @param Tag|EmbeddedTag $tag
     *
     * @return MultimediaObject
     */
    public function findOneWithoutTag(Tag $tag)
    {
        return $this->createStandardQueryBuilder()->field('tags._id')->notEqual(new \MongoId($tag->getId()))->getQuery()->getSingleResult();
    }

    /**
     * Find multimedia objects without all tags.
     *
     * @param array $tags
     * @param array $sort
     * @param int   $limit
     * @param int   $page
     *
     * @return ArrayCollection
     */
    public function findWithoutAllTags($tags, $sort = array(), $limit = 0, $page = 0)
    {
        $mongoIds = $this->getMongoIds($tags);
        $qb = $this->createStandardQueryBuilder()->field('tags._id')->notIn($mongoIds);

        $qb = $this->addSortAndLimitToQueryBuilder($qb, $sort, $limit, $page);

        return $qb->getQuery()->execute();
    }

    /**
     * Find series with tag.
     *
     * @param Tag|EmbeddedTag $tag
     *
     * @return ArrayCollection
     */
    public function findSeriesFieldWithTag(Tag $tag)
    {
        return $this->createStandardQueryBuilder()
            ->field('tags._id')->equals(new \MongoId($tag->getId()))
            ->distinct('series')
            ->getQuery()
            ->execute();
    }

    /**
     * Find one series with tag.
     *
     * @param Tag|EmbeddedTag $tag
     *
     * @return Series
     */
    public function findOneSeriesFieldWithTag(Tag $tag)
    {
        return $this->createStandardQueryBuilder()->field('tags._id')->equals(new \MongoId($tag->getId()))->distinct('series')->getQuery()->getSingleResult();
    }

    /**
     * Find series with any tag.
     *
     * @param array $tags
     *
     * @return ArrayCollection
     */
    public function findSeriesFieldWithAnyTag($tags)
    {
        $mongoIds = $this->getMongoIds($tags);

        return $this->createStandardQueryBuilder()->field('tags._id')->in($mongoIds)->distinct('series')->getQuery()->execute();
    }

    /**
     * Find series with all tags.
     *
     * @param array $tags
     *
     * @return ArrayCollection
     */
    public function findSeriesFieldWithAllTags($tags)
    {
        $mongoIds = $this->getMongoIds($tags);

        return $this->createStandardQueryBuilder()->field('tags._id')->all($mongoIds)->distinct('series')->getQuery()->execute();
    }

    /**
     * Find one series with all tags.
     *
     * @param array $tags
     *
     * @return Series
     */
    public function findOneSeriesFieldWithAllTags($tags)
    {
        $mongoIds = $this->getMongoIds($tags);

        return $this->createStandardQueryBuilder()->field('tags._id')->all($mongoIds)->distinct('series')->getQuery()->getSingleResult();
    }

    /**
     * Find distinct url pics in series.
     * TODO Limit and sort.
     *
     * @param Series $series
     *
     * @return ArrayCollection
     */
    public function findDistinctUrlPicsInSeries(Series $series)
    {
        return $this->createStandardQueryBuilder()->field('series')->references($series)->distinct('pics.url')->getQuery()->execute();
    }

    /**
     * Find distinct url pics.
     * TODO Limit and sort.
     *
     * @return ArrayCollection
     */
    public function findDistinctUrlPics()
    {
        return $this->createStandardQueryBuilder()->distinct('pics.url')->sort('public_date', 1)->getQuery()->execute();
    }

    /**
     * Find by series.
     *
     * @param Series $series
     *
     * @return ArrayCollection
     *
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function findBySeries(Series $series)
    {
        return $this->createQueryBuilder()->field('series')->references($series)->getQuery()->execute();
    }

    /**
     * Find by series.
     *
     * @param Series $series
     * @param int    $limit
     * @param int    $page
     *
     * @return ArrayCollection
     */
    public function findStandardBySeries(Series $series, $limit = 0, $page = 1)
    {
        $qb = $this->createStandardQueryBuilder()->field('series')->references($series);

        $qb = $this->addLimitToQueryBuilder($qb, $limit, $page);

        return $qb->sort('rank', 1)->getQuery()->execute();
    }

    /**
     * Find by series, tag code and status.
     * TODO not needed (Using findBySeries and filter).
     *
     * @param Series $series
     * @param string $tagCod
     * @param array  $status
     *
     * @return ArrayCollection
     */
    public function findBySeriesByTagCodAndStatus(Series $series, $tagCod, $status = array())
    {
        $qb = $this->createStandardQueryBuilder()->field('series')->references($series)->field('tags.cod')->equals($tagCod);

        if (0 !== count($status)) {
            $qb->field('status')->in($status);
        }

        $qb->sort('rank', 'asc');

        return $qb->getQuery()->execute();
    }

    /**
     * Find by broadcast.
     *
     * @param Broadcast $broadcast
     *
     * @return ArrayCollection
     *
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function findByBroadcast(Broadcast $broadcast)
    {
        return $this->createQueryBuilder()->field('broadcast')->references($broadcast)->getQuery()->execute();
    }

    /**
     * Find by embedded broadcast.
     *
     * @param EmbeddedBroadcast $embeddedBroadcast
     *
     * @return ArrayCollection
     */
    public function findByEmbeddedBroadcast(EmbeddedBroadcast $embeddedBroadcast)
    {
        return $this->createQueryBuilder()->field('embeddedBroadcast._id')->equals(new \MongoId($embeddedBroadcast->getId()))->getQuery()->execute();
    }

    /**
     * Find by embedded broadcast type query builder.
     *
     * @param $type
     *
     * @return \Doctrine\MongoDB\Query\Builder
     */
    public function findByEmbeddedBroadcastTypeQueryBuilder($type)
    {
        return $this->createQueryBuilder()->field('embeddedBroadcast.type')->equals($type);
    }

    /**
     * Find by embedded broadcast type query.
     *
     * @param $type
     *
     * @return \Doctrine\MongoDB\Query\Query
     */
    public function findByEmbeddedBroadcastTypeQuery($type)
    {
        return $this->findByEmbeddedBroadcastTypeQueryBuilder($type)->getQuery();
    }

    /**
     * Find by embedded broadcast type.
     *
     * @param string $type
     *
     * @return ArrayCollection
     */
    public function findByEmbeddedBroadcastType($type)
    {
        return $this->findByEmbeddedBroadcastTypeQuery($type)->execute();
    }

    /**
     * Find ordered by fieldName: asc/desc.
     *
     * @param Series $series
     * @param array  $sort
     *
     * @return QueryBuilder
     */
    public function getQueryBuilderOrderedBy(Series $series, $sort = array())
    {
        $qb = $this->createStandardQueryBuilder()->field('series')->references($series);
        $qb = $this->addSortToQueryBuilder($qb, $sort);

        return $qb;
    }

    /**
     * Find ordered by fieldName: asc/desc.
     *
     * @param Series $series
     * @param array  $sort
     *
     * @return Cursor
     */
    public function findOrderedBy(Series $series, $sort = array())
    {
        $qb = $this->getQueryBuilderOrderedBy($series, $sort);

        return $qb->getQuery()->execute();
    }

    /**
     * Get mongo ids.
     *
     * @param array $documents
     *
     * @return array
     */
    private function getMongoIds($documents)
    {
        $mongoIds = array();
        foreach ($documents as $document) {
            $mongoIds[] = new \MongoId($document->getId());
        }

        return $mongoIds;
    }

    /**
     * Create standard query builder.
     * Creates a query builder with all multimedia objects having status different than PROTOTYPE.
     * These are the multimedia objects we need to show in series.
     *
     * @return \Doctrine\MongoDB\Query\Builder
     */
    public function createStandardQueryBuilder()
    {
        return $this->createQueryBuilder()
            ->field('status')->notEqual(MultimediaObject::STATUS_PROTOTYPE)
            ->field('islive')->equals(false);
    }

    /**
     * Finds standard MultimediaObjects (not prototype) by a set of criteria.
     *
     * @param array    $criteria Query criteria
     * @param array    $sort     Sort array for Cursor::sort()
     * @param int|null $limit    Limit for Cursor::limit()
     * @param int|null $skip     Skip for Cursor::skip()
     *
     * @return array
     */
    public function findStandardBy(array $criteria, array $sort = null, $limit = null, $skip = null)
    {
        $criteria['status'] = MultimediaObject::STATUS_PUBLISHED;

        return $this->getDocumentPersister()->loadAll($criteria, $sort, $limit, $skip)->toArray(false);
    }

    /**
     * Finds a single standard MultimediaObject (not prototype) by a set of criteria.
     *
     * @param array $criteria
     *
     * @return null|object
     *
     * @throws \Doctrine\ODM\MongoDB\LockException
     */
    public function findStandardOneBy(array $criteria)
    {
        $criteria['status'] = MultimediaObject::STATUS_PUBLISHED;

        return $this->getDocumentPersister()->load($criteria);
    }

    /**
     * Find similar multimedia objects to a given one with same tags, from different series,
     * broadcast public, status normal, maximum 20 and random.
     *
     * @param MultimediaObject $multimediaObject
     * @param string           $tagBase
     *
     * @return ArrayCollection
     *
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function findRelatedMultimediaObjects(MultimediaObject $multimediaObject, $tagBase = 'UNESCO')
    {
        $qb = $this->createQueryBuilder()->field('_id')->notEqual($multimediaObject->getId())->field('series')->notEqual($multimediaObject->getSeries()->getId())->field('status')->equals(MultimediaObject::STATUS_PUBLISHED)->field('embeddedBroadcast.type')->equals(EmbeddedBroadcast::TYPE_PUBLIC);

        // Includes PUCHWEBTV code
        $tagRepo = $this->dm->getRepository('PumukitSchemaBundle:Tag');
        $unescoTag = $tagRepo->findOneByCod($tagBase);
        $codes = array();
        foreach ($multimediaObject->getTags() as $tag) {
            if ($unescoTag) {
                if ($tag->isDescendantOf($unescoTag)) {
                    $codes[] = $tag->getCod();
                }
            }
        }
        $qb->field('tags.cod')->in($codes);

        // Limit 20 and random order
        $qb->limit(20)->sort('rank', mt_rand(0, 1) ? 1 : -1);

        $aux = $qb->getQuery()->execute();

        return $aux;
    }

    /**
     * Count number of standard (not prototype) multimedia objects in the repo.
     *
     * @return int
     */
    public function count()
    {
        return $this->createStandardQueryBuilder()->count()->getQuery()->execute();
    }

    /**
     * Count total duration of standard (not prototype) multimedia objects.
     *
     * @return int total of seconds
     */
    public function countDuration()
    {
        $result = $this->createStandardQueryBuilder()->group(array(), array('count' => 0))->reduce('function (obj, prev) { prev.count += obj.duration; }')->getQuery()->execute();

        $singleResult = $result->getSingleResult();

        return $singleResult['count'];
    }

    /**
     * Count number of standard (not prototype) multimedia objects in a Series.
     *
     * @param Series $series
     *
     * @return int
     */
    public function countInSeries($series)
    {
        return $this->createStandardQueryBuilder()->field('series')->references($series)->count()->getQuery()->execute();
    }

    /**
     * Find by tag query builder.
     *
     * @param Tag|EmbeddedTag $tag
     *
     * @return QueryBuilder
     */
    public function findByTagCodQueryBuilder($tag)
    {
        return $this->createStandardQueryBuilder()->field('tags.cod')->equals($tag->getCod());
    }

    /**
     * Find by tag query.
     *
     * @param Tag|EmbeddedTag $tag
     * @param array           $sort
     *
     * @return Query
     */
    public function findByTagCodQuery($tag, $sort = array())
    {
        $qb = $this->findByTagCodQueryBuilder($tag);
        $qb = $this->addSortToQueryBuilder($qb, $sort);

        return $qb->getQuery();
    }

    /**
     * Find by tag code.
     *
     * @param Tag|EmbeddedTag $tag
     * @param array           $sort
     *
     * @return Cursor
     */
    public function findByTagCod($tag, $sort = array())
    {
        return $this->findByTagCodQuery($tag, $sort)->execute();
    }

    /**
     * Find all by tag query builder.
     *
     * @param Tag|EmbeddedTag $tag
     *
     * @return QueryBuilder
     */
    public function findAllByTagQueryBuilder($tag)
    {
        return $this->createQueryBuilder()->field('tags._id')->equals(new \MongoId($tag->getId()));
    }

    /**
     * Find all by tag query.
     *
     * @param Tag|EmbeddedTag $tag
     * @param array           $sort
     *
     * @return Query
     */
    public function findAllByTagQuery($tag, $sort = array())
    {
        $qb = $this->findAllByTagQueryBuilder($tag);
        $qb = $this->addSortToQueryBuilder($qb, $sort);

        return $qb->getQuery();
    }

    /**
     * Find all by tag.
     *
     * @param Tag|EmbeddedTag $tag
     * @param array           $sort
     *
     * @return Cursor
     */
    public function findAllByTag($tag, $sort = array())
    {
        return $this->findAllByTagQuery($tag, $sort)->execute();
    }

    /**
     * Returns all mmobjs (except prototypes) using a QueryBuilder.
     * The method $this->findAll() would return an array with ALL multimedia objects.
     * This is quite unconvenient when having tens of thousands of multimedia objects.
     * This function returns a Cursor instead, by using a QueryBuilder and executing it.
     * It also filters the 'Prototype' Multimedia Objects, which are generally not wanted, by default.
     *
     * @return Cursor
     */
    public function findAllAsIterable($filter_prototype = true)
    {
        if ($filter_prototype) {
            $qb = $this->createStandardQueryBuilder();
        } else {
            $qb = $this->createQueryBuilder();
        }

        return $qb->getQuery()->execute();
    }

    /**
     * Create QueryBuilder to find multimedia objects with group.
     *
     * @param Group $group
     * @param array $sort
     *
     * @return QueryBuilder
     */
    public function createBuilderWithGroup(Group $group, $sort = array())
    {
        $qb = $this->createQueryBuilder()->field('groups')->in(array(new \MongoId($group->getId())));

        $qb = $this->addSortToQueryBuilder($qb, $sort);

        return $qb;
    }

    /**
     * Find multimedia objects with group.
     *
     * @param Group $group
     * @param array $sort
     * @param int   $limit
     * @param int   $page
     *
     * @return ArrayCollection
     */
    public function findWithGroup(Group $group, $sort = array(), $limit = 0, $page = 0)
    {
        $qb = $this->createBuilderWithGroup($group, $sort);

        $qb = $this->addLimitToQueryBuilder($qb, $limit, $page);

        return $qb->getQuery()->execute();
    }

    /**
     * Count multimedia objects with group.
     *
     * @param Group $group
     * @param array $sort
     * @param int   $limit
     * @param int   $page
     *
     * @return ArrayCollection
     */
    public function countWithGroup(Group $group, $sort = array(), $limit = 0, $page = 0)
    {
        $qb = $this->createBuilderWithGroup($group, $sort);

        $qb = $this->addLimitToQueryBuilder($qb, $limit, $page);

        return $qb->count()->getQuery()->execute();
    }

    /**
     * Create QueryBuilder to find multimedia objects with group.
     *
     * @param Group $group
     * @param array $sort
     *
     * @return QueryBuilder
     */
    public function createBuilderWithGroupInEmbeddedBroadcast(Group $group, $sort = array())
    {
        $qb = $this->createQueryBuilder()->field('embeddedBroadcast.groups')->in(array(new \MongoId($group->getId())));

        $qb = $this->addSortToQueryBuilder($qb, $sort);

        return $qb;
    }

    /**
     * Find multimedia objects with group.
     *
     * @param Group $group
     * @param array $sort
     * @param int   $limit
     * @param int   $page
     *
     * @return ArrayCollection
     */
    public function findWithGroupInEmbeddedBroadcast(Group $group, $sort = array(), $limit = 0, $page = 0)
    {
        $qb = $this->createBuilderWithGroupInEmbeddedBroadcast($group, $sort);

        $qb = $this->addLimitToQueryBuilder($qb, $limit, $page);

        return $qb->getQuery()->execute();
    }

    /**
     * Count multimedia objects with group in embedded broadcast.
     *
     * @param Group $group
     * @param array $sort
     * @param int   $limit
     * @param int   $page
     *
     * @return ArrayCollection
     */
    public function countWithGroupInEmbeddedBroadcast(Group $group, $sort = array(), $limit = 0, $page = 0)
    {
        $qb = $this->createBuilderWithGroupInEmbeddedBroadcast($group, $sort);

        $qb = $this->addLimitToQueryBuilder($qb, $limit, $page);

        return $qb->count()->getQuery()->execute();
    }

    /**
     * Count in series with embedded broadcast type.
     *
     * @param Series $series
     * @param string $type
     *
     * @return int
     */
    public function countInSeriesWithEmbeddedBroadcastType(Series $series, $type = '')
    {
        return $this->createQueryBuilder()->field('series')->references($series)->field('embeddedBroadcast.type')->equals($type)->count()->getQuery()->execute();
    }

    /**
     * Count in series with embedded broadcast password.
     *
     * @param Series $series
     * @param string $type
     * @param string $password
     *
     * @return int
     */
    public function countInSeriesWithEmbeddedBroadcastPassword(Series $series, $type = '', $password = '')
    {
        return $this->createQueryBuilder()->field('series')->references($series)->field('embeddedBroadcast.type')->equals($type)->field('embeddedBroadcast.password')->equals($password)->count()->getQuery()->execute();
    }

    /**
     * Count in series with embedded broadcast groups.
     *
     * @param Series $series
     * @param string $type
     * @param array  $groups
     *
     * @return int
     */
    public function countInSeriesWithEmbeddedBroadcastGroups(Series $series, $type = '', $groups = array())
    {
        $groupsIds = $this->getGroupsIdsArray($groups);

        return $this->createQueryBuilder()->field('series')->references($series)->field('embeddedBroadcast.type')->equals($type)->field('embeddedBroadcast.groups')->all($groupsIds)->field('embeddedBroadcast.groups')->size(count($groupsIds))->count()->getQuery()->execute();
    }

    /**
     * Count number of all multimedia objects in a Series
     * (including prototype).
     *
     * @param Series $series
     *
     * @return int
     */
    public function countInSeriesWithPrototype($series)
    {
        return $this->createQueryBuilder()->field('series')->references($series)->count()->getQuery()->execute();
    }

    /**
     * Find Series field by EmbeddedBroadcast type Query Builder.
     *
     * @param string $type
     * @param array  $sort
     * @param int    $limit
     * @param int    $page
     *
     * @return ArrayCollection
     */
    public function findSeriesFieldByEmbeddedBroadcastTypeQueryBuilder($type = '', $sort = array(), $limit = 0, $page = 0)
    {
        $qb = $this->findByEmbeddedBroadcastTypeQueryBuilder($type)->distinct('series');

        $qb = $this->addSortAndLimitToQueryBuilder($qb, $sort, $limit, $page);

        return $qb;
    }

    /**
     * Find Series field by EmbeddedBroadcast type Query.
     *
     * @param string $type
     * @param array  $sort
     * @param int    $limit
     * @param int    $page
     *
     * @return ArrayCollection
     */
    public function findSeriesFieldByEmbeddedBroadcastTypeQuery($type = '', $sort = array(), $limit = 0, $page = 0)
    {
        $qb = $this->findSeriesFieldByEmbeddedBroadcastTypeQueryBuilder($type, $sort, $limit, $page);

        return $qb->getQuery();
    }

    /**
     * Find Series field by EmbeddedBroadcast type.
     *
     * @param string $type
     * @param array  $sort
     * @param int    $limit
     * @param int    $page
     *
     * @return ArrayCollection
     */
    public function findSeriesFieldByEmbeddedBroadcastType($type = '', $sort = array(), $limit = 0, $page = 0)
    {
        $query = $this->findSeriesFieldByEmbeddedBroadcastTypeQuery($type, $sort, $limit, $page);

        return $query->execute();
    }

    /**
     * Find series field with embedded broadcast type and groups Query Builder.
     *
     * @param string $type
     * @param array  $groups
     * @param array  $sort
     * @param int    $limit
     * @param int    $page
     *
     * @return \Doctrine\MongoDB\Query\Builder|QueryBuilder
     */
    public function findSeriesFieldByEmbeddedBroadcastTypeAndGroupsQueryBuilder($type = '', $groups = array(), $sort = array(), $limit = 0, $page = 0)
    {
        $groupsIds = $this->getGroupsIdsArray($groups);

        $qb = $this->findByEmbeddedBroadcastTypeQueryBuilder($type)->field('embeddedBroadcast.groups')->all($groupsIds)->field('embeddedBroadcast.groups')->size(count($groupsIds))->distinct('series');

        $qb = $this->addSortAndLimitToQueryBuilder($qb, $sort, $limit, $page);

        return $qb;
    }

    /**
     * Find series field with embedded broadcast type and groups Query.
     *
     * @param string $type
     * @param array  $groups
     * @param array  $sort
     * @param int    $limit
     * @param int    $page
     *
     * @return \Doctrine\MongoDB\Query\Query
     */
    public function findSeriesFieldByEmbeddedBroadcastTypeAndGroupsQuery($type = '', $groups = array(), $sort = array(), $limit = 0, $page = 0)
    {
        $qb = $this->findSeriesFieldByEmbeddedBroadcastTypeAndGroupsQueryBuilder($type, $groups, $sort, $limit, $page);

        return $qb->getQuery();
    }

    /**
     * Find series field with embedded broadcast type and groups.
     *
     * @param string $type
     * @param array  $groups
     * @param array  $sort
     * @param int    $limit
     * @param int    $page
     *
     * @return \Doctrine\MongoDB\Query\Query
     */
    public function findSeriesFieldByEmbeddedBroadcastTypeAndGroups($type = '', $groups = array(), $sort = array(), $limit = 0, $page = 0)
    {
        $query = $this->findSeriesFieldByEmbeddedBroadcastTypeAndGroupsQuery($type, $groups, $sort, $limit, $page);

        return $query->execute();
    }

    /**
     * Add limit (and page) to Query Builder.
     *
     * @param QueryBuilder $qb
     * @param int          $limit
     * @param int          $page
     *
     * @return QueryBuilder
     */
    private function addLimitToQueryBuilder($qb, $limit = 0, $page = 0)
    {
        if ($limit > 0) {
            $qb->limit($limit)->skip($limit * $page);
        }

        return $qb;
    }

    /**
     * Add sort to Query Builder.
     *
     * @param QueryBuilder $qb
     * @param array        $sort
     *
     * @return QueryBuilder
     */
    private function addSortToQueryBuilder($qb, $sort = array())
    {
        if (0 !== count($sort)) {
            $qb->sort($sort);
        }

        return $qb;
    }

    /**
     * Add sort and limit (and page) to Query Builder.
     *
     * @param QueryBuilder $qb
     * @param array        $sort
     * @param int          $limit
     * @param int          $page
     *
     * @return QueryBuilder
     */
    private function addSortAndLimitToQueryBuilder($qb, $sort = array(), $limit = 0, $page = 0)
    {
        $qb = $this->addSortToQueryBuilder($qb, $sort);
        $qb = $this->addLimitToQueryBuilder($qb, $limit, $page);

        return $qb;
    }

    public function getGroupsIdsArray($groups)
    {
        // TODO #10479: Find better way to get array with only IDs of groups
        if ($groups) {
            if ('array' !== gettype($groups)) {
                $groups = $groups->toArray();
                $groupsIds = $this->getMongoIds($groups);
            } else {
                $mockString = false;
                $mockGroup = false;
                foreach ($groups as $group) {
                    if ('string' === gettype($group)) {
                        $mockString = true;
                        break;
                    } elseif ($group instanceof Group) {
                        $mockGroup = true;
                        break;
                    }
                }
                if ($mockString) {
                    foreach ($groups as $group) {
                        $groupsIds[] = new \MongoId($group);
                    }
                } elseif ($mockGroup) {
                    $groupsIds = $this->getMongoIds($groups);
                } else {
                    $groupsIds = $groups;
                }
            }
        } else {
            $groupsIds = array();
        }

        return $groupsIds;
    }

    /**
     * @deprecated
     * Use findNextSessions of EmbeddedEventSessionService
     *
     * @param $multimediaObjectId
     *
     * @return array
     *
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function findNextEventSessions($multimediaObjectId)
    {
        $dm = $this->getDocumentManager();
        $collection = $dm->getDocumentCollection('PumukitSchemaBundle:MultimediaObject');

        $pipeline[] = array(
            '$match' => array(
                '_id' => new \MongoId($multimediaObjectId),
                'islive' => true,
                'embeddedEvent.embeddedEventSession' => array('$exists' => true),
            ),
        );

        $pipeline[] = array(
            '$project' => array(
                'multimediaObjectId' => '$_id',
                'event' => '$embeddedEvent',
                'sessions' => '$embeddedEvent.embeddedEventSession',
                'pics' => '$pics',
            ),
        );

        $pipeline[] = array('$unwind' => '$sessions');

        $pipeline[] = array(
            '$match' => array(
                '$and' => array(
                    array('sessions.start' => array('$exists' => true)),
                    array('sessions.start' => array('$gt' => new \MongoDate())),
                ),
            ),
        );

        $pipeline[] = array(
            '$project' => array(
                'multimediaObjectId' => '$multimediaObjectId',
                'event' => '$event',
                'pics' => '$pics',
                'session' => '$sessions',
            ),
        );

        $pipeline[] = array(
            '$group' => array(
                '_id' => '$multimediaObjectId',
                'data' => array(
                    '$addToSet' => array(
                        'event' => '$event',
                        'session' => '$session',
                        'multimediaObjectId' => '$multimediaObjectId',
                        'pics' => '$pics',
                    ),
                ),
            ),
        );

        $result = $collection->aggregate($pipeline, array('cursor' => array()))->toArray();

        foreach ($result as $key => $element) {
            $orderSession = array();
            foreach ($element['data'] as $eventData) {
                $orderSession[$eventData['session']['start']->sec] = $eventData;
            }
            ksort($orderSession);
            $result[$key]['data'] = array_values($orderSession);
        }

        return $result;
    }

    /**
     * @deprecated
     * Use findCurrentSessions of EmbeddedEventSessionService
     *
     * @param null $multimediaObjectId
     * @param int  $limit
     *
     * @return array
     *
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function findNowEventSessions($multimediaObjectId = null, $limit = 0)
    {
        $dm = $this->getDocumentManager();
        $collection = $dm->getDocumentCollection('PumukitSchemaBundle:MultimediaObject');

        if ($multimediaObjectId) {
            $pipeline[] = array(
                '$match' => array(
                    '_id' => new \MongoId($multimediaObjectId),
                    'islive' => true,
                    'embeddedEvent.embeddedEventSession' => array('$exists' => true),
                ),
            );
        } else {
            $pipeline[] = array(
                '$match' => array(
                    'islive' => true,
                    'embeddedEvent.display' => true,
                    'embeddedEvent.embeddedEventSession' => array('$exists' => true),
                ),
            );
        }

        $pipeline[] = array(
            '$project' => array(
                'multimediaObjectId' => '$_id',
                'event' => '$embeddedEvent',
                'sessions' => '$embeddedEvent.embeddedEventSession',
            ),
        );

        $pipeline[] = array('$unwind' => '$sessions');

        $pipeline[] = array(
            '$project' => array(
                'multimediaObjectId' => '$multimediaObjectId',
                'event' => '$event',
                'sessions' => '$sessions',
                'sessionEnds' => array(
                    '$add' => array(
                        '$sessions.start',
                        array(
                            '$multiply' => array(
                                '$sessions.duration',
                                1000,
                            ),
                        ),
                    ),
                ),
            ),
        );

        $pipeline[] = array(
            '$match' => array(
                'sessions.start' => array('$exists' => true),
                'sessions.start' => array('$lt' => new \MongoDate()),
                'sessionEnds' => array('$gt' => new \MongoDate()),
            ),
        );

        $pipeline[] = array(
            '$project' => array(
                'multimediaObjectId' => '$multimediaObjectId',
                'event' => '$event',
                'sessions' => '$sessions',
                'session' => '$sessions',
                'sessionEnds' => '$sessionEnds',
            ),
        );

        $pipeline[] = array(
            '$group' => array(
                '_id' => '$multimediaObjectId',
                'data' => array(
                    '$addToSet' => array(
                        'event' => '$event',
                        'session' => '$session',
                        'multimediaObjectId' => '$multimediaObjectId',
                        'sessionEnds' => '$sessionEnds',
                    ),
                ),
            ),
        );

        if ($limit > 0) {
            $pipeline[] = array('$limit' => $limit);
        }

        return $collection->aggregate($pipeline, array('cursor' => array()))->toArray();
    }

    /**
     * Count number of multimedia objects by series.
     *
     * @return array() A key/value hash where the key is the series id (string) and the value is the count
     *
     * @param array $seriesList
     *
     * @return array
     *
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function countMmobjsBySeries($seriesList = array())
    {
        $dm = $this->getDocumentManager();

        $multimediaObjectsColl = $dm->getDocumentCollection('PumukitSchemaBundle:MultimediaObject');

        $criteria = $this->dm->getFilterCollection()->getFilterCriteria($this->getClassMetadata());
        if ($seriesList) {
            $seriesIds = array();
            foreach ($seriesList as $series) {
                $seriesIds[] = new \MongoId($series->getId());
            }

            $criteria['series'] = array('$in' => $seriesIds);
        }

        $pipeline = array(
            array('$match' => $criteria),
            array('$group' => array('_id' => '$series', 'count' => array('$sum' => 1))),
        );

        $aggregation = $multimediaObjectsColl->aggregate($pipeline, array('cursor' => array()));
        $mmobjCount = array();

        foreach ($aggregation as $a) {
            $mmobjCount[(string) $a['_id']] = $a['count'];
        }

        return $mmobjCount;
    }

    /**
     * Count number of multimedia objects by tags.
     *
     * @return array() A key/value hash where the key is the tag cod (string) and the value is the count
     *
     * @param array $tagCodsList
     *
     * @return array
     *
     * @throws \Doctrine\ODM\MongoDB\MongoDBException
     */
    public function countMmobjsByTagCods($tagCodsList = array())
    {
        $dm = $this->getDocumentManager();

        $multimediaObjectsColl = $dm->getDocumentCollection('PumukitSchemaBundle:MultimediaObject');

        $pipeline = array(
            array('$project' => array('_id' => '$tags.cod')),
            array('$unwind' => '$_id'),
            array('$group' => array('_id' => '$_id', 'count' => array('$sum' => 1))),
        );

        $criteria = $this->dm->getFilterCollection()->getFilterCriteria($this->getClassMetadata());
        if ($criteria) {
            $preCriteria = array('$match' => $criteria);
            array_unshift($pipeline, $preCriteria);
        }

        if ($tagCodsList) {
            $preCriteria = array('$match' => array('tags.cod' => array('$in' => $tagCodsList)));
            array_unshift($pipeline, $preCriteria);
        }

        $aggregation = $multimediaObjectsColl->aggregate($pipeline, array('cursor' => array()));
        $mmobjCount = array();

        foreach ($aggregation as $a) {
            $mmobjCount[(string) $a['_id']] = $a['count'];
        }

        return $mmobjCount;
    }
}
